#!/bin/bash
set -euo pipefail

# Usage: $0 [-p PRIORITY] "Task description" YYYY MM INTERVAL

# Arguments:
#   "Task description"   The task you want to add (quoted if it has spaces)
#   YYYY                 Year (e.g., 2025)
#   MM                   Month (01–12)
#   INTERVAL             Repeat interval: daily | weekly | monthly

# Options:
#   -p <PRIORITY>        Set priority (A–Z), e.g. -p A
#   -h, --help           Show this help message

# Examples:
#   $0 -p A "Go cycling" 2025 09 daily
#   $0 "Pay credit card bill" 2025 09 monthly
#   $0 -p C "Team meeting" 2025 09 weekly

# Notes:
#   • If the given month/year is the current one, tasks start from today.
#   • Weekly tasks repeat on the same weekday as the start date.
#   • Monthly tasks occur once in that month on the start date.
#   • Tasks are appended to $TODO_FILE in "YYYY-MM-DD (PRIORITY) Task" format.

# FILES:
#   todo.txt    Task file (created automatically if it doesn't exist)

# SEE ALSO:
#   td(1) - Display task dashboard
#   md(1) - Mark tasks as completed
#   ad(1) - Add new tasks without repeating
#   ar(1) - Archive completed tasks

# For more information, visit: https://github.com/adityajoshi/todo-scripts

show_help() {
  cat <<EOF
Usage: $0 [-p PRIORITY] "Task description" YYYY MM INTERVAL

Arguments:
  "Task description"   The task you want to add (quoted if it has spaces)
  YYYY                 Year (e.g., 2025)
  MM                   Month (01–12)
  INTERVAL             Repeat interval: daily | weekly | monthly

Options:
  -p <PRIORITY>        Set priority (A–Z), e.g. -p A
  -h, --help           Show this help message

Examples:
  $0 -p A "Go cycling" 2025 09 daily
  $0 "Pay credit card bill" 2025 09 monthly
  $0 -p C "Team meeting" 2025 09 weekly

Notes:
  • If the given month/year is the current one, tasks start from today.
  • Weekly tasks repeat on the same weekday as the start date.
  • Monthly tasks occur once in that month on the start date.
  • Tasks are appended to $TODO_FILE in "YYYY-MM-DD (PRIORITY) Task" format.

FILES:
  todo.txt    Task file (created automatically if it doesn't exist)

SEE ALSO:
  td(1) - Display task dashboard
  md(1) - Mark tasks as completed
  ad(1) - Add new tasks without repeating
  ar(1) - Archive completed tasks

For more information, visit: https://github.com/adityajoshi/todo-scripts
EOF
  exit 0
}

# --- Parse arguments ---
PRIORITY=""
if [[ $# -eq 0 ]]; then
  show_help
fi

while getopts ":p:-:" opt; do
  case $opt in
    p) PRIORITY="$OPTARG" ;;
    -)
      case $OPTARG in
        help) show_help ;;
        *) echo "Unknown option --$OPTARG"; exit 1 ;;
      esac ;;
    \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
  esac
done
shift $((OPTIND -1))

# Remaining args
TASK=$1
YEAR_NUM=$2
MONTH_NUM=$3
INTERVAL=$4

if [[ -z "$TASK" || -z "$YEAR_NUM" || -z "$MONTH_NUM" || -z "$INTERVAL" ]]; then
  echo "❌ Missing arguments. Run $0 --help"
  exit 1
fi

# Validate priority
if [[ -n "$PRIORITY" ]]; then
  if ! [[ "$PRIORITY" =~ ^[A-Z]$ ]]; then
    echo "❌ Priority must be a single letter A–Z."
    exit 1
  fi
  TASK="($PRIORITY) $TASK"
fi

# Validate year/month
if ! [[ "$MONTH_NUM" =~ ^(0?[1-9]|1[0-2])$ && "$YEAR_NUM" =~ ^[0-9]{4}$ ]]; then
  echo "❌ Invalid month or year."
  exit 1
fi

# Current date
TODAY=$(date +%Y-%m-%d)
CURRENT_YEAR=$(date +%Y)
CURRENT_MONTH=$(date +%m)
CURRENT_DAY=$(date +%d)

START_DAY=1
if [[ "$MONTH_NUM" -eq "$CURRENT_MONTH" && "$YEAR_NUM" -eq "$CURRENT_YEAR" ]]; then
  START_DAY=$CURRENT_DAY
fi

# Days in month
DAYS_IN_MONTH=$(date -d "$YEAR_NUM-$MONTH_NUM-01 +1 month -1 day" +%d)

echo "📌 Adding '$TASK' ($INTERVAL) for $YEAR_NUM-$MONTH_NUM"
DATES=()

# Create todo file if it doesn't exist
touch "$TODO_FILE"

case "$INTERVAL" in
  daily)
    for DAY in $(seq $START_DAY $DAYS_IN_MONTH); do
      DATES+=("$(printf "%04d-%02d-%02d" $YEAR_NUM $MONTH_NUM $DAY)")
    done
    ;;
  weekly)
    START_DATE=$(printf "%04d-%02d-%02d" $YEAR_NUM $MONTH_NUM $START_DAY)
    START_WEEKDAY=$(date -d "$START_DATE" +%u)
    for DAY in $(seq $START_DAY $DAYS_IN_MONTH); do
      DATE=$(printf "%04d-%02d-%02d" $YEAR_NUM $MONTH_NUM $DAY)
      [[ $(date -d "$DATE" +%u) -eq $START_WEEKDAY ]] && DATES+=("$DATE")
    done
    ;;
  monthly)
    DATES+=("$(printf "%04d-%02d-%02d" $YEAR_NUM $MONTH_NUM $START_DAY)")
    ;;
  *)
    echo "❌ Invalid interval. Use daily, weekly, or monthly."
    exit 1
    ;;
esac

# Preview
echo "🔍 Preview of tasks that will be added to $TODO_FILE:"
for DATE in "${DATES[@]}"; do
  echo "  $DATE $TASK"
done

# Confirmation
read -rp "Proceed with adding these tasks? (y/n): " CONFIRM
if [[ "$CONFIRM" != "y" && "$CONFIRM" != "Y" ]]; then
  echo "❌ Cancelled. No tasks added."
  exit 0
fi

# Append
for DATE in "${DATES[@]}"; do
  printf "%s %s\n" "$DATE" "$TASK" >> "$TODO_FILE"
done

echo "✅ Task(s) added successfully."
