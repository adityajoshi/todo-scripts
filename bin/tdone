#!/bin/bash
# todo-scripts: Mark Task as Done
#
# Usage:
#   tdone <line_number>
#
# Marks the task at the given line number in todo.txt as completed.
#
# Example:
#   tdone 3
#     (Marks the task on line 3 as done)
#
# The todo.txt file should be in the current directory as "todo.txt".
# For more, see: https://github.com/adityajoshi/todo-scripts

show_help() {
  cat << EOF
todo-scripts: Mark Task as Done

USAGE:
  tdone [OPTIONS] <line_number> [line_number2] [line_number3] ...

DESCRIPTION:
  Mark one or more tasks as completed by their line numbers in the todo.txt file.
  Tasks will be prefixed with "x YYYY-MM-DD" to indicate completion.

OPTIONS:
  -p, --preview     Show task preview before marking (dry-run mode)
  -u, --undo        Unmark completed tasks (remove completion prefix)
  -f, --force       Skip confirmation prompts
  -b, --backup      Create backup before modifying file
  -h, --help        Show this help message

ARGUMENTS:
  line_number(s)    One or more line numbers of tasks to mark as done (required)

EXAMPLES:
  # Mark single task
  tdone 3

  # Mark multiple tasks
  tdone 1 3 5

  # Preview what would be marked
  tdone -p 3

  # Unmark completed task
  tdone -u 3

  # Mark with confirmation
  tdone 3
  # Will show: "Mark task 'Review code' as done? [y/N]"

  # Force mark without confirmation
  tdone -f 3

OUTPUT:
  Success: ‚úÖ Marked as done: Review code (line 3)
  Already done: ‚ö†Ô∏è  Task on line 3 is already marked done.
  Error: ‚ùå Invalid line number.

ERROR HANDLING:
  ‚Ä¢ Invalid line number: Shows error if line_number is not a number
  ‚Ä¢ File not found: Shows error if todo.txt doesn't exist
  ‚Ä¢ Out of range: Shows error if line_number exceeds file length
  ‚Ä¢ Already done: Shows warning if task is already marked complete
  ‚Ä¢ Backup creation: Creates backup before modifications
  ‚Ä¢ Atomic operations: Ensures file integrity

CONFIGURATION:
  MD_CONFIRM        Require confirmation before marking (default: true)
  MD_BACKUP         Create backup before modifications (default: true)
  MD_BACKUP_DIR     Directory for backups (default: .todo-backups)

FILES:
  todo.txt              Task file (modified in place)
  .todo-backups/        Backup directory (if enabled)

SEE ALSO:
  tview(1)     - Display task dashboard
  ta(1)        - Add new tasks
  trep(1)      - Schedule recurring tasks
  tarc(1)      - Archive completed tasks

For more information, visit: https://github.com/adityajoshi/todo-scripts
EOF
}

# Configuration
#TODO_FILE="todo.txt"
BACKUP_DIR="${MD_BACKUP_DIR:-.todo-backups}"
REQUIRE_CONFIRM="${MD_CONFIRM:-true}"
CREATE_BACKUP="${MD_BACKUP:-false}"

# Parse command line options
preview_mode=false
undo_mode=false
force_mode=false
backup_enabled="$CREATE_BACKUP"

while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--preview)
      preview_mode=true
      shift
      ;;
    -u|--undo)
      undo_mode=true
      shift
      ;;
    -f|--force)
      force_mode=true
      shift
      ;;
    -b|--backup)
      backup_enabled=true
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    -*)
      echo "‚ùå Error: Unknown option: $1" >&2
      echo "Use '$0 -h' for help." >&2
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

# Check if we have line numbers
if [ $# -eq 0 ]; then
  echo "‚ùå Error: No line numbers provided" >&2
  echo "Usage: $0 [OPTIONS] <line_number> [line_number2] ..." >&2
  echo "Use '$0 -h' for more information." >&2
  exit 1
fi

# File check
if [ ! -f "$TODO_FILE" ]; then
  echo "‚ùå Error: $TODO_FILE not found." >&2
  echo "üí° Tip: Use 'add' command to create your first task." >&2
  exit 1
fi

# Check if file is empty
if [ ! -s "$TODO_FILE" ]; then
  echo "üìù No tasks found in $TODO_FILE"
  exit 0
fi

# Validation functions
validate_line_number() {
  local lineno="$1"
  if ! [[ "$lineno" =~ ^[0-9]+$ ]]; then
    echo "‚ùå Error: Invalid line number: '$lineno'" >&2
    return 1
  fi
  
  local total=$(wc -l < "$TODO_FILE")
  if (( lineno < 1 || lineno > total )); then
    echo "‚ùå Error: Line number $lineno out of range (1‚Äì$total)" >&2
    return 1
  fi
  
  return 0
}

get_task_description() {
  local lineno="$1"
  local line=$(sed -n "${lineno}p" "$TODO_FILE")
  
  # Remove completion prefix if present
  if echo "$line" | grep -q "^x [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} "; then
    line=$(echo "$line" | sed 's/^x [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} //')
  fi
  
  # Remove created date prefix
  if echo "$line" | grep -q "^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} "; then
    line=$(echo "$line" | sed 's/^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} //')
  fi
  
  # Remove priority
  line=$(echo "$line" | sed 's/^(A-Z) //')
  
  echo "$line"
}

is_task_completed() {
  local lineno="$1"
  sed -n "${lineno}p" "$TODO_FILE" | grep -q "^x "
}

create_backup() {
  if [[ "$backup_enabled" == "true" ]]; then
    mkdir -p "$BACKUP_DIR"
    local backup_file="$BACKUP_DIR/todo-$(date +%Y%m%d-%H%M%S).txt"
    cp "$TODO_FILE" "$backup_file"
    echo "üíæ Backup created: $backup_file"
  fi
}

mark_task() {
  local lineno="$1"
  local undo="$2"
  
  if [[ "$undo" == "true" ]]; then
    # Unmark task (remove completion prefix)
    if is_task_completed "$lineno"; then
      sed -i "${lineno}s/^x [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} //" "$TODO_FILE"
      task_desc=$(get_task_description "$lineno")
      echo "‚úÖ Unmarked: $task_desc (line $lineno)"
    else
      echo "‚ö†Ô∏è  Task on line $lineno is not marked as done"
    fi
  else
    # Mark task as done
    if is_task_completed "$lineno"; then
      echo "‚ö†Ô∏è  Task on line $lineno is already marked done"
    else
      sed -i "${lineno}s/^/x $(date +%F) /" "$TODO_FILE"
      task_desc=$(get_task_description "$lineno")
      echo "‚úÖ Marked as done: $task_desc (line $lineno)"
    fi
  fi
}

# Validate all line numbers first
invalid_lines=()
for lineno in "$@"; do
  if ! validate_line_number "$lineno"; then
    invalid_lines+=("$lineno")
  fi
done

if [ ${#invalid_lines[@]} -gt 0 ]; then
  echo "‚ùå Error: Invalid line numbers: ${invalid_lines[*]}" >&2
  exit 1
fi

# Preview mode
if [[ "$preview_mode" == "true" ]]; then
  echo "üîç Preview mode - no changes will be made:"
  echo
  for lineno in "$@"; do
    task_desc=$(get_task_description "$lineno")
    if [[ "$undo_mode" == "true" ]]; then
      if is_task_completed "$lineno"; then
        echo "  Line $lineno: Would unmark: $task_desc"
      else
        echo "  Line $lineno: Not marked as done: $task_desc"
      fi
    else
      if is_task_completed "$lineno"; then
        echo "  Line $lineno: Already done: $task_desc"
      else
        echo "  Line $lineno: Would mark: $task_desc"
      fi
    fi
  done
  exit 0
fi

# Confirmation prompt (unless forced)
if [[ "$REQUIRE_CONFIRM" == "true" && "$force_mode" != "true" ]]; then
  echo "üìã Tasks to be processed:"
  for lineno in "$@"; do
    task_desc=$(get_task_description "$lineno")
    if [[ "$undo_mode" == "true" ]]; then
      echo "  Line $lineno: $task_desc (unmark)"
    else
      echo "  Line $lineno: $task_desc (mark done)"
    fi
  done
  echo
  read -p "Continue? [y/N] " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Operation cancelled"
    exit 0
  fi
fi

# Create backup before modifications
create_backup

# Process each line number
for lineno in "$@"; do
  mark_task "$lineno" "$undo_mode"
done

