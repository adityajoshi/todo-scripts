#!/bin/bash
# todo-scripts: Add Task
#
# Usage:
#   add "Task description" [+project] [@context] [due:YYYY-MM-DD]
#
# Options:
#   -p <priority>   Set priority (A-Z), e.g. -p A
#
# Examples:
#   add "Buy groceries"
#   add -p B "Review project proposal" +work due:2024-01-20
#   add "Call Alice" @phone +personal
#
# If no due date is provided, the default is today.
# The todo.txt file should be in the current directory as "todo.txt".
#
# Mark tasks as completed using your preferred editor or the companion scripts.
# For more, see: https://github.com/adityajoshi/todo-scripts

show_help() {
  cat << EOF
todo-scripts: Add Task

USAGE:
  add [OPTIONS] "TASK DESCRIPTION" [+project] [@context] [due:YYYY-MM-DD]

DESCRIPTION:
  Add a new task to your todo.txt file with automatic date stamping and
  optional priority, project tags, context tags, and due dates.

OPTIONS:
  -p <priority>    Set priority level (A-Z), e.g. -p A for highest priority
  -h, --help       Show this help message

ARGUMENTS:
  TASK DESCRIPTION  The task description (required)
  +project          Project tag (optional)
  @context          Context tag (optional)
  due:YYYY-MM-DD    Due date in YYYY-MM-DD format (optional, defaults to today)

EXAMPLES:
  # Basic task
  add "Buy groceries"

  # Task with priority
  add -p A "Important meeting"

  # Task with project and context
  add "Review code" +work @urgent

  # Task with custom due date
  add "Submit report" +work due:2024-01-20

  # Complete example
  add -p A "Prepare presentation" +work @meeting due:2024-01-18

OUTPUT FORMAT:
  Tasks are stored in todo.txt with the following format:
  YYYY-MM-DD (PRIORITY) TASK DESCRIPTION +project @context due:YYYY-MM-DD

  Example:
  2024-01-15 (A) Prepare presentation +work @meeting due:2024-01-18

CONFIGURATION:
  DEFAULT_DUE_DAYS  Environment variable to set default due date offset (default: 0)

FILES:
  todo.txt    Task file (created automatically if it doesn't exist)

SEE ALSO:
  td(1) - Display task dashboard
  md(1) - Mark tasks as completed
  repeat(1) - Schedule recurring tasks
  ar(1) - Archive completed tasks

For more information, visit: https://github.com/adityajoshi/todo-scripts
EOF
}

# Configuration
#TODO_FILE="todo.txt"
DEFAULT_DUE_DAYS="${DEFAULT_DUE_DAYS:-0}"

# Create todo file if it doesn't exist
touch "$TODO_FILE"

# Validation functions
validate_priority() {
  local priority="$1"
  if [[ ! "$priority" =~ ^[A-Z]$ ]]; then
    echo "❌ Error: Priority must be a single letter A-Z, got: '$priority'" >&2
    exit 1
  fi
}

validate_date() {
  local date_str="$1"
  if [[ ! "$date_str" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
    echo "❌ Error: Invalid date format. Use YYYY-MM-DD, got: '$date_str'" >&2
    exit 1
  fi
  
  # Check if date is valid using date command
  if ! date -d "$date_str" >/dev/null 2>&1 && ! date -j -f "%Y-%m-%d" "$date_str" >/dev/null 2>&1; then
    echo "❌ Error: Invalid date: '$date_str'" >&2
    exit 1
  fi
}

validate_task_description() {
  local description="$1"
  # Trim whitespace
  description=$(echo "$description" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
  
  if [[ -z "$description" ]]; then
    echo "❌ Error: Task description cannot be empty" >&2
    return 1
  fi
  
  echo "$description"
}

# Check for --help flag first (before getopts)
if [[ "$1" == "--help" ]]; then
  show_help
  exit 0
fi

# Options
priority=""
while getopts "p:h" opt; do
  case $opt in
    p) 
      validate_priority "$OPTARG"
      priority="($OPTARG)" 
      ;;
    h) show_help; exit 0 ;;
    *) echo "❌ Error: Invalid option: -$OPTARG" >&2; exit 1 ;;
  esac
done
shift $((OPTIND-1))

if [ $# -eq 0 ]; then
  echo "❌ Error: No task description provided" >&2
  echo "Usage: $0 [-p A] <task description> [+project] [@context] [due:YYYY-MM-DD]" >&2
  echo "Use '$0 -h' for more information." >&2
  exit 1
fi

# Validate and clean task description
task_description=$(validate_task_description "$*")
if [ $? -ne 0 ]; then
  exit 1
fi

created=$(date +%F)
task="$created  ${priority:+$priority }$task_description"

# Check if due date is already specified in the task
if echo "$task" | grep -q "due:[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}"; then
  # Extract and validate the due date
  due_date=$(echo "$task" | grep -o "due:[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}" | cut -d: -f2)
  validate_date "$due_date"
elif echo "$task" | grep -q "due:"; then
  # Found due: but not in correct format
  echo "❌ Error: Invalid due date format. Use due:YYYY-MM-DD" >&2
  exit 1
else
  # Add default due date
  default_due=$(date -d "+$DEFAULT_DUE_DAYS days" +%F 2>/dev/null || date -v+${DEFAULT_DUE_DAYS}d +%F)
  task="$task due:$default_due"
fi

echo "$task" >> "$TODO_FILE"
echo "✅ Added: $task"
